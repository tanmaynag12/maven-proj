
define(['require', 'SpinnerCommon'], function(){
	const {SpinnerOverlayCard} = require('SpinnerCommon');
	
	const {Modal,Button, Image} = ReactBootstrap; 
	
	class CommonUploadDocument extends React.Component{
		constructor(props){
			super(props);
			this.state = {
				fileCount:0
			};
		}
		
		componentDidMount(){
			this.initFileUpToUpload();
			
		}
		initFileUpToUpload = () => {
			const {id, getDocumentCategory} = this.props;
			getDocumentCategory().then(function(jObj){
				
				var {docJArray =[]} = jObj;
				var uploaded_fileList = [];
				docJArray.forEach(({name, documentId, eDocId, extension})=>{
					uploaded_fileList.push({
						id: eDocId,
						name:name,
						isSaved:true,
						downloadUrl:''
					});
				});
				
				this.setState({
					fileCount: uploaded_fileList.length
				}, ()=>{

					$.fileup({
						url: 'uploadDocumentStudent.json',
						inputID: 'upload-6-'+id,
						extraFields: {
							categoryId: jObj.DocumentCategoryId,
							fileSize: 10485760 //10485760
						},
						queueID: 'upload-6-queue-'+id,
						fieldName:'fileData',
						files:uploaded_fileList	,
						onRemove: function(fileObj, fileIndex, file) {
							console.log("fileIndex....."+fileIndex);
							if(fileObj.file!=undefined && fileObj.file.isSaved){

								removeUploadedDocumentById(fileObj.file.id, function(resObj){
									if(resObj.responseFlag=='1'){
										console.log("#fileup-upload-6-DynamicDocumentUpload"+id+"-"+(fileIndex-1));
										$("#fileup-upload-6-"+id+"-"+(fileIndex-1)).remove();
										this.setState({
											fileCount: 0
										});
									}
								}.bind(this));//responseFlag
							}else{
								this.setState({
									fileCount: 0
								});
								return true;
							}
							return false;
						}.bind(this),
						onSelect: function(file) {
							this.setState({
								fileCount: 1
							}, ()=>{
								setTimeout(()=>{
									$.fileup('upload-6-'+id, 'upload', '*');
								}, 500);
							});
						}.bind(this),
						onSuccess: function(response, file_number, file){
							response = eval('(' + response + ')');
							
							$.fileup('upload-6-'+id, 'remove', '*');
							if (response[0].responseFlag == '1') {
								this.initFileUpToUpload();	
							}else{
								bootbox.alert(response[0].responseText);
							}
							
						}.bind(this)
						/*files: [
		                {
		                    id: 1,
		                    name: 'Cat.jpg', // required
		                    size: '254361',  // required
		                    previewUrl: 'img/preview/cat.jpg',
		                    downloadUrl: 'img/cat.jpg',
		                    customParam: '123'
		                }
		            ]*/
					});
				});
			}.bind(this));
			
		}
		
		
		
		render() {
			const {id, multiple=false} = this.props;
			const {fileCount=0} = this.state;
			return (<div>
		  		<div className="fileup-theme2">
		        <div id={"upload-6-queue-"+id} className="fileup-queue"></div>
		        
		        <div className={"btn btn-outline-secondary fileup-btn "+(fileCount==0 || multiple?"":"d-none")}>
		        	Select file    
		        	<input type="file" id={"upload-6-"+id} multiple={multiple}/>
		        </div>
		        
		    </div></div>);
		}
	}
	var Maxsize =  5242880;
	class CropAndUploadImage extends React.Component {
		constructor(props){
			super(props);
			this.$image_crop = null;
			this.state = {
					showCroppieModal: false,
					isUploadingInProgress: false,
			}
		}
		
		componentDidMount(){
			
		}
		
		cropAndSaveFileEvent = () =>{
			
			this.setState({
				isUploadingInProgress: true
			});
			this.$image_crop.croppie('result', {
				type: 'canvas',
				size: 'viewport'
			}).then(function(response){
				const {uploadUrl=''} = this.props;
				
				var base64ImageContent = response.replace(/^data:image\/(png|jpg);base64,/, "")
				var blob = base64ToBlob(base64ImageContent, 'image/png');                
				var formData = new FormData();
				formData.append('fileData', blob);
				$.ajax({
					url: uploadUrl,
					type: "POST",
					contentType: false,
					processData: false,
					data: formData,
					name : 'fileData',
					size: Maxsize,
					onSubmit : function(data) {
						//if(extension.toString().toLowerCase() == 'png' || extension.toString().toLowerCase() == 'jpg',extension.toString().toLowerCase() == 'jpeg'){
						startLoading();
						this.setData({
							'fileSize':Maxsize
						});
					},
					success:function(data)
					{
						if(isNaN(data)){
							bootbox.alert("File size is larger than specified !!");
						} else {
							
							this.setState({
								showCroppieModal:false,
								isUploadingInProgress: false
							}, ()=>{
								bootbox.alert("Image uploaded successfully !!!");
							}); 
						}
					}.bind(this)
				});
			}.bind(this));
		
		}
		
		initCroppie = () => {
			const {id=''} = this.props; 
			var flg = this.props.showCroppieModal;
			this.$image_crop = $('#image_demo_'+id).croppie({
				enableExif: true,
				enableOrientation: true,
				viewport: {
					width:200,
					height:200,
					type:'square' //circle
				},
				boundary:{
					width:300,
					height:300
				}
			});
			var $image_crop = this.$image_crop;
			
			$('#input-croppie-image-'+id).on('change', function(){
				var reader = new FileReader();
				reader.onload = function (event) {
					$image_crop.croppie('bind', {
						url: event.target.result
					}).then(function(){
						console.log('jQuery bind complete');
					});
				}
				reader.readAsDataURL(this.files[0]);
				//$('#uploadimageModal').modal('show');
			});
			
			
			
		}
		
		handleClose = () =>{
			this.setState({showCroppieModal:false});
		}
		handleOpen = () =>{
			this.setState({showCroppieModal:true}, ()=>{

				this.initCroppie();
			});
		
		}
		
		render(){
			const {id='', src:imageSrc='', children} = this.props;
			
			return (<div>
			
			<Image src={imageSrc+"&d="+new Date().getTime()} thumbnail style={{width: '120px', height:'120px'}}/>	
			
			 {g_isStudentDetailsFreezed!=true && (<Button variant="dark" className="mt-1" size="sm" onClick={(e)=>this.handleOpen()}>
				{children}
			</Button>)}
			
			
        	<Modal show={this.state.showCroppieModal} onHide={(e)=>this.handleClose()}>
        	        <Modal.Header closeButton>
        	          <Modal.Title>{'Crop & Upload Image'}</Modal.Title>
        	        </Modal.Header>
        	        <Modal.Body>
        	        
        	        <SpinnerOverlayCard show={this.state.isUploadingInProgress}/>
        	        
        	        <div className={"btn btn-dark fileup-btn mb-2"}>
	            		Select file    
	            		<input type="file" id={"input-croppie-image-"+id} />
	            	</div>
        	        
        	        <div id={"image_demo_"+id}>
        	        </div>
        	        
        	        </Modal.Body>
        	        <Modal.Footer>
        	          <Button variant="secondary" onClick={(e)=>this.handleClose()}>
        	            Close
        	          </Button>
        	          <Button variant="primary" className={"crop_image_"+id} onClick={(e)=>this.cropAndSaveFileEvent()}>
        	          {'Crop & Upload Image'}
        	          </Button>
        	        </Modal.Footer>
        	      </Modal>
        		
        		</div>)
		}
	}
	
	
	function base64ToBlob(base64, mime) 
	{
	    mime = mime || '';
	    var sliceSize = 1024;
	    var byteChars = window.atob(base64);
	    var byteArrays = [];
	
	    for (var offset = 0, len = byteChars.length; offset < len; offset += sliceSize) {
	        var slice = byteChars.slice(offset, offset + sliceSize);
	
	        var byteNumbers = new Array(slice.length);
	        for (var i = 0; i < slice.length; i++) {
	            byteNumbers[i] = slice.charCodeAt(i);
	        }
	
	        var byteArray = new Uint8Array(byteNumbers);
	
	        byteArrays.push(byteArray);
	    }
	
	    return new Blob(byteArrays, {type: mime});
	}
	return {
		CommonUploadDocument:CommonUploadDocument,
		CropAndUploadImage:CropAndUploadImage
	}
});úéPÅ»m      gøÞûgøÞûHõgøåw   x    O^partitionKey=%28https%2Ccmrit.ac.in%29,:https://erp.cmrit.ac.in/scriptsReact/applicant/actions/CommonUploadDocument.js necko:classified 1 strongly-framed 1 security-info  request-method GET response-head HTTP/1.1 200 
Date: Fri, 11 Apr 2025 08:08:02 GMT
Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/8.1.22
Strict-Transport-Security: max-age=63072000; includeSubdomains; preload
Permissions-Policy: geolocation=(),midi=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()
X-StackifyID: V1|c03590b5-d411-47de-001f-25c6be1b0d17|
Accept-Ranges: bytes
ETag: W/"8054-1744298494000"
Last-Modified: Thu, 10 Apr 2025 15:21:34 GMT
Content-Type: application/javascript
Content-Length: 8054
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Referrer-Policy: same-origin
Feature-Policy: geolocation 'self'; vibrate 'none'
Access-Control-Allow-Headers: origin, x-requested-with, content-type
 original-response-headers Date: Fri, 11 Apr 2025 08:08:02 GMT
Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/8.1.22
Strict-Transport-Security: max-age=63072000; includeSubdomains; preload
Permissions-Policy: geolocation=(),midi=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()
X-StackifyID: V1|c03590b5-d411-47de-001f-25c6be1b0d17|
Accept-Ranges: bytes
ETag: W/"8054-1744298494000"
Last-Modified: Thu, 10 Apr 2025 15:21:34 GMT
Content-Type: application/javascript
Content-Length: 8054
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Referrer-Policy: same-origin
Feature-Policy: geolocation 'self'; vibrate 'none'
Access-Control-Allow-Headers: origin, x-requested-with, content-type
Keep-Alive: timeout=5, max=89
Connection: Keep-Alive
 ctid 2 uncompressed-len 0 net-response-time-onstart 690 net-response-time-onstop 690   v